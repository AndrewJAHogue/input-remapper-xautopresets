#!/bin/bash

# ------------------------------ #
# Global Variable Initialization #
# ------------------------------ #

parent_app_name=input-remapper
app_name=${0#*$parent_app_name-*}
version="0.9.6"
desc="Automatic input-remapper preset manager for systems with access to xdotools"
app_dir=~/.config/$parent_app_name
global_conf="$app_dir/$app_name.conf"
app_log="$app_dir/$app_name.log"
active_presets_log="$app_dir/active"
default_class=_default
input_remapper_gui=Input-remapper-gtk
bypass_preset=_Bypass
active_win_class=
active_win_title=

declare -A active_presets

# --------------- #
# Option Handling #
# --------------- #

Help ()
{
    echo -e "\n$parent_app_name-$app_name v$version"
    echo -e "$desc\n"
    echo -e "Valid options:"
    echo "-h        Display this table"
    echo -e "-v        Display version number\n"
    echo -e "Valid arguments:"
    echo -e "[enable|disable|restart|start|status|stop]\n\truns systemctl --user [command] $parent_app_name-$app_name.service"
    echo -e "\tExample useage: \"$parent_app_name-$app_name start\"\n"
    echo "Please use 'systemctl --user start input-remapper-xautopresets.service' to run this program or provide a valid argument"
}

while getopts :hv option; do
    case "${option}" in

        h)  Help
            exit ;;

        v)  echo "$parent_app_name-$app_name v$version"
            exit ;;

        ?)  echo "invalid option \"-${OPTARG}\""
            Help
            exit ;;

    esac
done

# ----------------- #
# Argument Handling #
# ----------------- #

if [ $# -gt 0 ]; then
    for command in ${@}; do
        case "$command" in

            enable|disable|restart|start|status|stop)   systemctl --user $command "$parent_app_name-$app_name.service" ;;

            *)  echo -e "Unknown argument '$command'\n Valid arguments are [enable|disable|restart|start|status|stop]" ;;

        esac
    done
    exit
fi

# -------------------- #
# Run As Service Check #
# -------------------- #

if [ -z "${INVOCATION_ID}" ]; then
    echo "Please use 'systemctl --user start input-remapper-xautopresets.service' to run this program"
    exit
fi

# ------------------ #
# Log Initialization #
# ------------------ #

TimeStamp () # Prefixes provided string ($1) with timestamp and writes to provided log file ($2)
{
    explicit=
    overwrite=

    local OPTIND option
    while getopts :e:o: option; do
        case "${option}" in
            e) explicit=1
            E="${OPTARG}"
            ;;
            o) overwrite=1
            O="${OPTARG}"
            ;;
        esac
    done

    if [ "$explicit" == 1 ]; then
        if [ "$overwrite" == 1 ]; then
            echo -e "$(date +%D) | $(date +%T):  $O" > "${@:$#}"
        else
            echo -e "$(date +%D) | $(date +%T):  $E" >> "${@:$#}"
        fi
    else
        if [ "$overwrite" == 1 ]; then
            echo "$(date +%D) | $(date +%T):  $O" > "${@:$#}"
        else
            echo "$(date +%D) | $(date +%T):  ${*:${OPTIND}:1}" >> "${@:$#}"
        fi
    fi
}

TimeStamp -o "$parent_app_name-$app_name v$version" "$app_log"
TimeStamp -e "$desc\n" "$app_log"

while IFS=  read -r -d $'\0'; do
    if [ -f "$REPLY/$app_name.log" ]; then
        dev_name=${REPLY#*/presets/*}
        TimeStamp -o "Device:[$dev_name]" "$REPLY/$app_name.log"&
    fi
done < <(find "$app_dir/presets" -type d -print0)


# -------------------------- #
# Local Function Definitions #
# -------------------------- #

SetPreset () # Applies preset to device. Requires device name, target preset name, and default preset name as parameters
{
    dev_name="$1"
    dev_dir="$app_dir/presets/$dev_name"
    dev_log="$dev_dir/$app_name.log"
    target_preset=$2
    default_preset=$3

    touch "$dev_log"

#     echo ${active_presets[$dev_name]}" ?= $target_preset"

    if [ "${active_presets[$dev_name]}" != "$target_preset" ]; then
        TimeStamp -e "Preset change required\n" "$dev_log"

        if [ "$target_preset" != "$bypass_preset" ]; then
            TimeStamp "Searching for $target_preset.json..." "$dev_log"

            if [ ! -f "$dev_dir/$target_preset.json" ]; then
                TimeStamp -e "Not found!\n" "$dev_log"
                TimeStamp "Searching for $default_preset.json..." "$dev_log"

                if [ ! -f "$dev_dir/$default_preset.json" ]; then
                    TimeStamp -e "Not found!\n" "$dev_log"
                    echo "No appropriate preset found. Checking injection status of Device:[$dev_name]..." |
                        tee --append "$dev_log" "$app_log" > /dev/null

                    if [ "${active_presets[$dev_name]}" != "$bypass_preset" ]; then
                        #stop input-remapper injection
                        echo -e "$(date +%D) | $(date +%T):  Stopping injection on Device:[$dev_name]\n" |
                            tee --append "$dev_log" "$app_log" > /dev/null
                        input-remapper-control --command stop --device "$dev_name" &>> "$dev_log"
                        active_preset="$bypass_preset"

                    else
                        echo -e "$(date +%D) | $(date +%T):  Injection inactive. No action required\n" |
                            tee --append "$dev_log" "$app_log" > /dev/null
                        active_preset="$bypass_preset"
                    fi

                else
                    TimeStamp -e "Found!\n" "$dev_log"

                    if [ "${active_presets[$dev_name]}" != "$default_preset" ]; then
                        #enable default preset
                        echo -e "$(date +%D) | $(date +%T):  Setting Device:[$dev_name] to Preset:$default_preset\n" |
                            tee --append "$dev_log" "$app_log" > /dev/null
                        input-remapper-control --command start --device "$dev_name" --preset "$default_preset" &>> "$dev_log"
                        active_preset="$default_preset"

                    else
                        echo -e "$(date +%D) | $(date +%T):  Preset:$default_preset is already active on Device:[$dev_name]\n" |
                            tee --append "$dev_log" "$app_log" > /dev/null
                        active_preset="$default_preset"
                    fi
                fi

            else
                TimeStamp -e "Found!\n" "$dev_log"
                #enable app-specific preset
                echo -e "$(date +%D) | $(date +%T):  Setting Device:[$dev_name] to Preset:$target_preset\n" |
                    tee --append "$dev_log" "$app_log" > /dev/null
                input-remapper-control --command start --device "$dev_name" --preset "$target_preset" &>> "$dev_log"
                active_preset="$target_preset"
            fi

        else
            #stop input-remapper injection
            echo -e "$(date +%D) | $(date +%T):  Stopping injection on Device:[$dev_name]\n" |
                tee --append "$dev_log" "$app_log" > /dev/null
            input-remapper-control --command stop --device "$dev_name" &>> "$dev_log"
            active_preset="$bypass_preset"
        fi

    else
        echo -e "$(date +%D) | $(date +%T):  Preset:$target_preset is already active on Device:[$dev_name]\n" |
            tee --append "$dev_log" "$app_log" > /dev/null
        active_preset="$target_preset"
    fi
    echo -e "\n\n$(date +%D) | $(date +%T):  ------------------------------------------------------------------\n\n" >> "$dev_log"
    echo "$dev_name=$active_preset" >> "$active_presets_log"
}

SetTargets () # Takes active window [class|title], .conf and .log file as parameters. Iterates through .conf file and sets target/default presets by reference
{
    active_window="$1"
    conf_file="$2"
    dev_log="$3"

    local -n target_ref=$4
    local -n default_ref=$5

    echo -e "$conf_file:\n" >> "$dev_log"
    while IFS=  read -r -d $'\n'; do
        REPLY_=${REPLY%*=*}
        _REPLY=${REPLY#*=*}
        echo "$REPLY_=$_REPLY" >> "$dev_log"
        if [[ $active_window == $REPLY_ ]]; then
            target_ref=$_REPLY
        else
            if [[ $default_class == $REPLY_ ]]; then
                default_ref=$_REPLY
            fi
        fi
    done < <(cat < "$conf_file")
    echo "" >> "$dev_log"
    TimeStamp "Target Preset: $target_preset" "$dev_log"
    TimeStamp -e "Default Preset: $default_preset\n" "$dev_log"
}

LoadConfig () # Finds appropriate preset for active window. Requires single device name as parameter
{
    declare -a targets

    dev_name="$1"
    dev_dir="$app_dir/presets/$dev_name"
    dev_conf="$dev_dir/$app_name.conf"
    dev_log="$app_dir/presets/$dev_name/$app_name.log"
    dev_class_conf="$dev_dir/classes/$active_win_class.conf"
    global_class_conf="$app_dir/classes/$active_win_class.conf"

    target_preset=_NOTSET
    default_preset=_NOTSET

    #local -n active_preset_ref="$2"

    TimeStamp "Active window has changed" "$dev_log"
    TimeStamp "Active Window Class: $active_win_class" "$dev_log"
    TimeStamp "Active Window Title: $active_win_title" "$dev_log"

    TimeStamp "Searching for global configuration file ($global_conf)..." "$dev_log"
    if [ -f "$global_conf" ]; then
        TimeStamp -e "Found!\n" "$dev_log"
        SetTargets "$active_win_class" "$global_conf" "$dev_log" target_preset default_preset
    else
        TimeStamp -e "Not found!\n" "$dev_log"
        TimeStamp "Generating default global configuration file: $global_conf..." "$dev_log"
        touch "$global_conf"
        echo -e "$default_class=$bypass_preset\n$input_remapper_gui=$bypass_preset" > "$global_conf"
        default_preset=$bypass_preset
        target_preset=$default_preset
        TimeStamp "Done!" "$dev_log"
        TimeStamp "Target Preset: $target_preset" "$dev_log"
        TimeStamp -e "Default Preset: $default_preset\n" "$dev_log"
    fi

    TimeStamp "Searching for global class-specific configuration file ($global_class_conf)..." "$dev_log"
    if [ -f "$global_class_conf" ]; then
        TimeStamp -e "Found!\n" "$dev_log"
        SetTargets "$active_win_title" "$global_class_conf" "$dev_log" target_preset default_preset
    else
        TimeStamp -e "Not found!\n" "$dev_log"
    fi

    TimeStamp "Searching for device-specific configuration file ($dev_conf)..." "$dev_log"
    if [ -f "$dev_conf" ]; then
        TimeStamp -e "Found!\n" "$dev_log"
        SetTargets "$active_win_class" "$dev_conf" "$dev_log" target_preset default_preset
    else
        TimeStamp -e "Not found!\n" "$dev_log"
    fi

    TimeStamp "Searching for device-and-class-specific configuration file ($dev_class_conf)..." "$dev_log"
    if [ -f "$dev_class_conf" ]; then
        TimeStamp -e "Found!\n" "$dev_log"
        SetTargets "$active_win_title" "$dev_class_conf" "$dev_log" target_preset default_preset
    else
        TimeStamp -e "Not found!\n" "$dev_log"
    fi

    [ "$default_preset" == _NOTSET ] && default_preset="$bypass_preset"
    [ "$target_preset" == _NOTSET ] && target_preset="$default_preset"

    TimeStamp "Active Preset: ${active_presets[$dev_name]}" "$dev_log"
    TimeStamp "Target Preset: $target_preset" "$dev_log"
    TimeStamp "Default Preset: $default_preset" "$dev_log"

    SetPreset "$dev_name" "$target_preset" "$default_preset"
    #active_presets[$dev_name]=$(SetPreset "$dev_name" "$target_preset" "$default_preset")
    #active_preset_ref=$(SetPreset "$dev_name" "$target_preset" "$default_preset")
}

# --------- #
# Main Loop #
# --------- #

while [ true ]; do
        # What's the active window's class and title?
        if [ $(xdotool getactivewindow) ]; then
            active_win_class=$(xdotool getactivewindow getwindowclassname 2>> "$app_log")
            active_win_title=$(xdotool getactivewindow getwindowname 2>> "$app_log")
        fi

        # Has either changed since the last time we checked?
        if [ "$active_win_class" != "$last_win_class" ] || [ "$active_win_title" != "$last_win_title" ]; then
            TimeStamp "Active Window has changed!" "$app_log"
            TimeStamp "Active Window Class: $active_win_class" "$app_log"
            TimeStamp -e "Active Window Title: $active_win_title\n" "$app_log"

            # Run through a list of connected devices...
            while IFS=  read -r -d $'\n'; do

                # ...and if the device has a configuration folder...
                if [ -d "$app_dir/presets/$REPLY" ]; then

                    # ...configure the device for the active window
                    TimeStamp "Configuring Device:[$REPLY]" "$app_log"
                    LoadConfig "$REPLY" "active_presets[$REPLY]"&
                fi
            done < <(input-remapper-control --list)

            # This is the last time the active window changed
            last_win_class="$active_win_class"
            last_win_title="$active_win_title"

            wait

            TimeStamp "Active Presets:" "$app_log"

            while IFS=  read -r -d $'\n'; do
                DEVICE=${REPLY%*=*}
                PRESET=${REPLY#*=*}
                TimeStamp "[$DEVICE]=$PRESET" "$app_log"
                active_presets[$DEVICE]="$PRESET"
            done < <(cat < "$active_presets_log")

            rm "$active_presets_log"

            echo -e "\n\n$(date +%D) | $(date +%T):  ------------------------------------------------------------------\n\n" >> "$app_log"
        fi
        sleep .05
done
