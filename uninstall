parent_app=input-remapper
app_name=xautopresets
script_dir=$HOME/.local/bin
service_dir=$HOME/.config/systemd/user
working_dir=$HOME/.config/$parent_app
log_dir=working_dir/logs
dev_dir=$working_dir/presets
class_conf_dir=classes
script_file=$script_dir/$parent_app-$app_name
config_script=$script_dir/$app_name-config
service_file=$parent_app-$app_name.service

failure=false

ConfirmationDialogue ()
{
    echo "Are you sure you want to do this?"
    printf "y/N: "
}

GetConfirmation ()
{
    read confirm

    case "$confirm" in

        y|Y) echo true ;;

        *) echo false ;;

    esac
}

Help ()
{
    echo -e "\n$parent_app-$app_name uninstaller\n"
    echo -e "Uninstaller MUST be passed one or more options; it will only remove what you tell it\n"
    echo "  -c          Remove configuration file, 'xautopresets.ini'"
    echo "  -h          Display this menu"
    echo "  -l          Remove all log files"
    echo "  -s          Remove script and service files"
    echo "  -o          Remove all configuration files from pre-1.0 (old) versions"
    echo "              (including EVERYTHING in all 'classes/' directories)"
    exit
}

RemoveScript ()
{
    if [ "$(systemctl --user is-active $service_file)" == "active" ]; then
        echo "Service running. Stopping..."
        ( systemctl --user stop "$service_file" && echo "Done!" ) ||
            ( echo -e "FATAL ERROR: Failed!\nFATAL ERROR: Could not stop service\nPANIC: Aborting uninstallation." && exit )
    fi

    if [ "$(systemctl --user is-enabled $service_file)" == "enabled" ]; then
        echo "Service enabled. Disabling..."
        ( systemctl --user disable "$service_file" && echo "Done!" ) ||
            ( echo -e "FATAL ERROR: Failed!\nFATAL ERROR: Could not disable service\nPANIC: Aborting uninstallation." && exit )
    fi

    if [ -f "$service_dir/$service_file" ]; then
        ( rm -v "$service_dir/$service_file" &&
            ( echo "Reloading user systemd daemon..." && systemctl --user daemon-reload && echo "Done!" ) ||
                ( echo -e "ERROR: Failed!\nWARNING: Please manually restart your user systemd daemon" && failure=true )) ||
            ( echo "ERROR: Failed!" && failure=true )
    fi

    if [ -f "$script_file" ]; then
        rm -v "$script_file" ||
            ( echo "ERROR: Failed!" && failure=true )
    fi

    if [ -f "$config_script" ]; then
        rm -v "$script_file" ||
            ( echo "ERROR: Failed!" && failure=true )
    fi
}

RemoveLogs ()
{
    if [ -f "$working_dir/active" ]; then
        rm -v "$working_dir/active" ||
            ( echo "ERROR: Failed!" && failure=true )
    fi

    if [ -f "$working_dir/$app_name.log" ]; then
        rm -v "$working_dir/$app_name.log" ||
            ( echo "ERROR: Failed!" && failure=true )
    fi

    for dir in $dev_dir/*; do
        if [ -f "$dir/$app_name.log" ]; then
            rm -v "$dir/$app_name.log" ||
                ( echo "ERROR: Failed!" && failure=true )
        fi
    done

    if [ -d "$log_dir" ]; then

        for log in $log_dir/*.log; do
            if [ -f "$log" ]; then
                rm -v "$log" ||
                    ( echo "ERROR: Failed!" && failure=true )
            fi
        done
        [ -z "$(ls -A $log_dir)" ] && ( rm -v "$log" || ( echo "ERROR: Failed!" && failure=true ))
    fi
}

RemoveOld ()
{
    if [ -d "$working_dir/$class_conf_dir" ]; then
        rm -vr "$working_dir/$class_conf_dir" ||
            ( echo "ERROR: Failed!" && failure=true )
    fi

    if [ -f "$working_dir/$app_name.conf" ]; then
        rm -vr "$working_dir/$app_name.conf" ||
            ( echo "ERROR: Failed!" && failure=true )
    fi

    for dir in $dev_dir/*; do
        if [ -d "$dir/$class_conf_dir" ]; then
            rm -vr "$dir/$class_conf_dir" ||
                ( echo "ERROR: Failed!" && failure=true )
        fi

        if [ -f "$dir/$app_name.conf" ]; then
            rm -vr "$dir/$app_name.conf" ||
                ( echo "ERROR: Failed!" && failure=true )
        fi
    done
}

RemoveConfig ()
{
    if [ -f "$working_dir/$app_name.ini" ]; then
        rm -vr "$working_dir/$app_name.ini" ||
            ( echo "ERROR: Failed!" && failure=true )
    fi
}

while getopts :chlso option; do

    echo "You have chosen to run the uninstaller with option '-${option}'."
    case "${option}" in

        c) echo "This will remove your configuration file, 'xautopresets.ini'"
        ConfirmationDialogue
        [ $(GetConfirmation) == true ] && RemoveConfig ;;

        h) Help ;;

        l) echo "This will remove all log files"
        ConfirmationDialogue
        [ $(GetConfirmation) == true ] && RemoveLogs ;;

        s) echo "This will remove the script and service files"
        ConfirmationDialogue
        [ $(GetConfirmation) == true ] && RemoveScript ;;

        o) echo "This will remove all configuration files from pre-1.0 (old) versions"
        echo "(including EVERYTHING in all 'classes/' directories)"
        ConfirmationDialogue
        [ $(GetConfirmation) == true ] && RemoveOld ;;

        ?) echo "FATAL ERROR: invalid option \"-${OPTARG}\""
        Help ;;
    esac
done

[ $OPTIND == 1 ] && Help

if [ "$failure" == "true" ]; then
    echo "WARNING: One or more problems were encountered during uninstallation."
    echo "Automatic removal has completed; manual intervention from user is required."
    echo "Please review output and take whatever steps neccessary to complete removal"
else
    echo "Uninstallation complete!"
fi
